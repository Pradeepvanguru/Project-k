leaveform.js--------------------------------- 6/10/2024

import React, { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import axios from 'axios';
import { Link, useNavigate } from 'react-router-dom';

function LeaveForm() {
  const navigate = useNavigate();
  const { register, handleSubmit, watch, setValue, formState: { errors }, reset } = useForm();
  const [semesters, setSemesters] = useState([]);
  const [subjects, setSubjects] = useState([]);
  const [dayName, setDayName] = useState(''); // To store the day name
  const [sections, setSections] = useState([]);
  const [name, setFacultyNames] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const semestersData = {
    1: [1, 2],
    2: [3, 4],
    3: [5, 6],
    4: [7, 8],
  };

  // Time slots for periods
  const periodTimes = {
    1: { startTime: '09:00 AM', endTime: '10:00 AM' },
    2: { startTime: '10:00 AM', endTime: '11:00 AM' },
    3: { startTime: '11:10 AM', endTime: '12:10 PM' },
    4: { startTime: '12:00 PM', endTime: '01:10 PM' },
    5: { startTime: '02:00 PM', endTime: '03:00 PM' },
    6: { startTime: '03:00 PM', endTime: '04:00 PM' },
    7: { startTime: '04:00 PM', endTime: '05:00 PM' },
  };

  const onYearChange = (year) => {
    setValue('sem', ''); // Reset semester and subjects when year changes
    
    if (year) {
      setSemesters(semestersData[year]); // Update semesters based on year
      handleSemesterChange(semestersData[year][0]); // Automatically set to first semester
    } else {
      setSemesters([]);
    }
  };

  // Function to handle changes when the semester is selected
  const handleSemesterChange = (sem) => { 
    const year = watch('year');  // Get the selected year
    if (year && semestersData[year].includes(sem)) {
      // Proceed with semester-specific logic
      console.log(`Selected semester ${sem} for year ${year}`);
    } else {
      console.log('Selected semester is not valid for the chosen year');
    }
  };

  // Function to get the day name from the selected date
  const handleDateChange = (event) => {
    const selectedDate = new Date(event.target.value);
    const dayName = selectedDate.toLocaleDateString('en-US', { weekday: 'long' });
    setDayName(dayName); // Update day name state
    setValue('dayName', dayName); // Update the form value for dayName
  };

  // Automatically update start and end times based on the selected period
  const handlePeriodChange = (event) => {
    const period = event.target.value;
    if (periodTimes[period]) {
      setValue('startTime', periodTimes[period].startTime); // Set start time
      setValue('endTime', periodTimes[period].endTime); // Set end time
    }
  };

  const onSubmit = (data, event) => {
    event.preventDefault(); // Prevent form's default behavior
    // console.log('Form data:', data);
    console.log('Validation errors:', errors);
    setIsSubmitting(true);
    axios.post('http://localhost:5000/api/leave', data)
      .then((response) => {
        console.log('Form submitted successfully', response);
        reset();
        navigate('/');
        // alert('Class Adjustment Form submitted successfully');
      })
      .catch((error) => {
        console.error('There was an error submitting the form!', error);
        setIsSubmitting(false);
      });
  };

  const branches = ["IT", "CSE", "MECH", "Civil", "EEE", "ECE", "AIDS"];

  const fetchFacultyData = async ({ email, branch, sem, year }) => {
    try {
      const response = await axios.post('http://localhost:5000/api/getFacultyData', { email, branch, sem, year });
      if (response.data) {
        setFacultyNames(response.data.name ); // Set the name from the response
        setSubjects(response.data.subjects || ''); // Set subjects from the response
        setSections(response.data.sections || ''); // Set sections from the response
      }
    } catch (error) {
      console.error('Error fetching faculty data', error);
    }
  };

  // Trigger fetching faculty data when email, branch, sem, or year change
  useEffect(() => {
    const email = watch('email');
    const branch = watch('branch');
    const sem = watch('sem');
    const year = watch('year');

    if (email && branch && sem && year) {
      fetchFacultyData({ email, branch, sem, year });
    }
  }, [watch('email'), watch('branch'), watch('sem'), watch('year')]);

  const back={ 
    opecity:'150px', 
    boxShadow: " 2px 0px 1px #fff,0 2px  10px #F33566" 
  }  
  return (
    <div className='col-sm-12  m-5 '>
    <div style={{ float: 'left' }} className='shadow-lg  p-1 '>
          <Link to="/" className="btn btn-primary  rounded-lg" style={back}>
            <h4>&#8592; Back</h4>
          </Link>
        </div>
      <div className=' p-3 m-2 '>
        

        <div className='col-sm-10 container-fluid rounded bg-secondary p-5'>
          <form onSubmit={handleSubmit(onSubmit)} className='form-group'>
            <center>
              <h3><b className='p-1 rounded text-dark bg-white ' style={back}>Class Adjustment Request Form...ðŸ‘‹</b></h3>
              <br /><br></br>
            </center>

            {/* Branch ,year*/}
            <div className='row' style={{ float: 'left' }}>
              <div className='col-md-6'>
                <b><label style={{ float: 'left' }}>Branch</label></b>
                <span style={{ color: 'red', float: 'left', marginLeft: '2px' }} >*</span>
                <select {...register('branch')} className='form-control mb-3' required >
                  <option value="">Select Branch</option>
                  {branches.map((branch) => (
                    <option key={branch} value={branch}>{branch}</option>
                  ))}
                </select>
              </div>

              {/* Year */}
              <div className='col-md-6'>
                <b><label style={{ float: 'left' }}>Year</label></b>
                <span style={{ color: 'red', float: 'left', marginLeft: '2px' }} >*</span>
                <select {...register('year')} className='form-control mb-3' required onChange={(e) => onYearChange(e.target.value)}>
                  <option value="">Select Year</option>
                  <option value="1">1st Year</option>
                  <option value="2">2nd Year</option>
                  <option value="3">3rd Year</option>
                  <option value="4">4th Year</option>
                </select>
              </div>
            </div>

            {/* Semester & Section */}
            <div className='row'>
              <div className='col-md-6'>
                <b><label style={{ float: 'left' }}>Semester</label></b>
                <span style={{ color: 'red', float: 'left', marginLeft: '2px' }} >*</span>
                <select {...register('sem')} className='form-control mb-3' required onChange={(e) => handleSemesterChange(e.target.value)}>
                  <option value="">Select Semester</option>
                  {(semesters || []).map((sem) => (
                    <option key={sem} value={sem}>{sem} Semester</option>
                  ))}
                </select>
              </div>

              <div className='col-md-6'>
                <b><label style={{ float: 'left' }}>Email</label></b>
                <span style={{ color: 'red', float: 'left', marginLeft: '2px' }} >*</span>
                <input {...register('email')} type='email' className='form-control mb-3' required placeholder='Registration email' />
              </div>
            </div>

            {/* Name & Email */}
            <div className='row'>
              <div className='col-md-6'>
                <b><label style={{ float: 'left' }}>Name</label></b>
                <span style={{ color: 'red', float: 'left', marginLeft: '2px' }} >*</span>
                <input {...register('name', { required: true })} type='name' className='form-control mb-3' value={name ||''} readOnly placeholder='name' />
              </div>
              <div className='col-md-6'>
                <b><label style={{ float: 'left' }}>Section</label></b>
                <span style={{ color: 'red', float: 'left', marginLeft: '2px' }} >*</span>
                <select {...register('section')} className='form-control mb-3' required>
                  <option value="">Select Section</option>
                  {sections.map((section) => (
                    <option key={section} value={section}>{section}</option>
                  ))}
                </select>
              </div>
              <div className='col-md-6'>
                <b><label style={{ float: 'left' }}>Subject Name</label></b>
                <span style={{ color: 'red', float: 'left', marginLeft: '2px' }} >*</span>
                <select {...register('subj')} className='form-control mb-3' required>
                  <option value="">Select Subject</option>
                  {subjects.map((subject) => (
                    <option key={subject} value={subject}>{subject}</option>
                  ))}
                </select>
              </div>
              
              <div className='col-md-6'>
                <b><label style={{ float: 'left' }}>Which Period</label></b>
                <span style={{ color: 'red', float: 'left', marginLeft: '2px' }} >*</span>
                <select {...register('period')} className='form-control mb-3' required onChange={handlePeriodChange}>
                  <option value="">Select Period</option>
                  <option value="1">Period 1</option>
                  <option value="2">Period 2</option>
                  <option value="3">Period 3</option>
                  <option value="4">Period 4</option>
                  <option value="5">Period 5</option>
                  <option value="6">Period 6</option>
                  <option value="7">Period 7</option>
                </select>
              </div>
            </div>

            {/* Period */}
            <div className='row'>
            <div className='col-md-6'>
                <b><label style={{ float: 'left' }}>Start Time</label></b>
                <input {...register('startTime')} type='text' className='form-control mb-3' readOnly />
              </div>

              <div className='col-md-6'>
                <b><label style={{ float: 'left' }}>End Time</label></b>
                <input {...register('endTime')} type='text' className='form-control mb-3' readOnly />
              </div>
             
            </div>

              {/* Leave date and day */}
              <div className='row'>
            <div className='col-md-6'>
                <b><label style={{ float: 'left' }}>Leave Date</label></b>
                <span style={{ color: 'red',float:'left', marginLeft:'2px' }} >*</span>
                <input {...register('leaveDate')} type='date' className='form-control mb-3' required onChange={handleDateChange}  />
              </div>

              <div className='col-md-6'>
               <b><label style={{ float: 'left' }}>Day</label></b>
                <input {...register('dayName',{ required: true })} type='text' className='form-control mb-3' value={dayName} readOnly />
            </div>
            </div>
            <center>
            <label className='text-warning'>Note: please submit the button on dubble click..!</label>
              <button type="submit"  className='btn btn-warning mt-4 p-2 w-100 fs-5 fw-bold text-white' disabled={isSubmitting}>
                {isSubmitting ? 'Submitting...' : 'Submit'}
              </button>
            </center>
          </form>
        </div>
      </div>
    </div>
  );
}

export default LeaveForm;
--------------------------------------------------------------------------------------------
Registrationform.js

import React, { useState } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';

const RegistrationForm = () => {
  const [formData, setFormData] = useState({
    year: '',
    sem: '',
    email: '',
    section: '',
    branch: '',
    name: '',
    subj: ''
  });
  
  const [subjects, setSubjects] = useState([]);
  const [sections, setSections] = useState([]);

  const subjectsData = {
    1: {
      1: ['Maths', 'Physics', 'Chemistry', 'English', 'Computer Science', 'Electronics'],
      2: ['Biology', 'Statistics', 'History', 'Geography', 'C Programming', 'Data Structures']
    },
    2: {
      3: ['Database Management Systems', 'Data Communication Systems', 'OOP through Java', 'Discrete Mathematical Structures', 'Digital Logic Design', 'Python programming and Applications'],
      4: ['Web Development', 'Mobile Apps', 'Machine Learning', 'AI', 'Ethical Hacking', 'Cloud Computing']
    },
    3: {
      5: ['Design and Analysis of Algorithms', 'Artificial Intelligence', 'Cloud Computing', 'Software Engineering Principles', 'Exploratory Data Analytics(AI & ML)', 'Web Programming Languages(Full stack)','Fundamentals of Security','Term paper'],
      6: ['Quantum Computing', 'Embedded Systems', 'Data Mining', 'Game Development', 'Web Security', 'Blockchain']
    },
    4: {
      7: ['Project Management', 'Information Retrieval', 'HCI', 'IT Ethics', 'E-Commerce', 'Digital Marketing'],
      8: ['Research Methodology', 'Software Testing', 'Data Visualization', 'System Modeling', 'DevOps', 'Content Management']
    }
  };

  const branches = ["IT", "CSE", "MECH", "Civil", "EEE", "ECE", "AIDS"];
  const sectionsData = {
    IT: ['A', 'B'],
    CSE: ['A', 'B'],
    MECH: ['A', 'B', 'C'],
    Civil: ['A', 'B'],
    EEE: ['A', 'B'],
    ECE: ['A', 'B'],
    AIDS: ['A', 'B']
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));

    // Handle year change
    if (name === 'year') {
      setFormData(prevData => ({ ...prevData, sem: '', subj: '' }));
    }

    // Handle semester change
    if (name === 'sem') {
      setSubjects(subjectsData[formData.year][value]);
    }
  };

  const handleBranchChange = (e) => {
    const selectedBranch = e.target.value;
    setFormData(prevData => ({ ...prevData, branch: selectedBranch, section: '' })); // Reset section when branch changes
    setSections(sectionsData[selectedBranch] || []); // Update sections based on selected branch
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:5000/registers', formData);
      alert("Registration successful...!!");
      
      console.log(response);
    } catch (error) {
      console.error('There was an error registering!', error);
      alert('Registration failed!');
    }
  };

  const getSemesters = (year) => {
    switch (year) {
      case '1': return [1, 2];
      case '2': return [3, 4];
      case '3': return [5, 6];
      case '4': return [7, 8];
      default: return [];
    }
  };
  const back={ 
    opecity:'150px', 
    boxShadow: "0 4px 8px #f333, 0 8px 10px #f333" 
  } 
  return (
    <div className='col-sm-12  p-5 bg-secondary vh-100'>
      <div style={{float:'left'}}>
        <Link to="/" className="btn btn-primary mx-2" style={back}>
          <h4>&#8592; Back</h4>
        </Link>
      </div>
      
      <div className='col-sm-7 container rounded'>
        <div className='bg-warning rounded p-4'>
          <form onSubmit={handleSubmit}>
          <center><h3  className=' p-1 rounded' style={back}>Registered Here..  </h3><br /></center>

            <div className='row' style={{ float: 'left' }}>
              <div className='col-md-6'>
                <div className='form-group'>
                  <label className='fw-bold'>Branch</label>
                  <select className='form-control mb-3' name="branch" value={formData.branch} onChange={handleBranchChange} required>
                    <option value="">Select Branch</option>
                    {branches.map((branch, index) => (
                      <option key={index} value={branch}>{branch}</option>
                    ))}
                  </select>
                </div>
              </div>

              <div className='col-md-6'>
                <div className='form-group'>
                  <label className='fw-bold'>Year</label>
                  <select className='form-control mb-3' name="year" value={formData.year} onChange={handleChange} required>
                    <option value="">Select Year</option>
                    <option value="1">1 year</option>
                    <option value="2">2 year</option>
                    <option value="3">3 year</option>
                    <option value="4">4 year</option>
                  </select>
                </div>
              </div>
            </div>

            <div className='row'>
              <div className='col-md-6'>
                <div className='form-group'>
                  <label className='fw-bold'>Semester</label>
                  <select className='form-control mb-3' name="sem" value={formData.sem} onChange={handleChange} required disabled={!formData.year}>
                    <option value="">Select Semester</option>
                    {getSemesters(formData.year).map(sem => (
                      <option key={sem} value={sem}>{sem} sem</option>
                    ))}
                  </select>
                </div>
              </div>
              <div className='col-md-6'>
                <div className='form-group'>
                  <label className='fw-bold'>Section</label>
                  <select className='form-control mb-3' name="section" value={formData.section} onChange={handleChange} required disabled={!formData.branch}>
                    <option value="">Select Section</option>
                    {sections.map((section) => (
                      <option key={section} value={section}>{section}</option>
                    ))}
                  </select>
                </div>
              </div>                 
            </div>

            <div className='row'>
            <div className='col-md-6'>
                <div className='form-group'>
                  <label className='fw-bold'>Subject</label>
                  <select className='form-control mb-3' name="subj" value={formData.subj} onChange={handleChange} required disabled={!formData.sem}>
                    <option value="">Select Subject</option>
                    {subjects.map(subj => (
                      <option key={subj} value={subj}>{subj}</option>
                    ))}
                  </select>
                </div>
              </div>

              <div className='col-md-6'>
                <div className='form-group'>
                  <label className='fw-bold'>Name</label>
                  <input className='form-control mb-3' name="name" value={formData.name} onChange={handleChange} required placeholder='start with Mr./Mrs.' />
                </div>
              </div>
              
              <div className='col-md-6'>
                <div className='form-group'>
                  <label className='fw-bold'>Email</label>
                  <input className='form-control mb-3' type="email" name="email" value={formData.email} onChange={handleChange} required placeholder='Enter your email' />
                </div>
              </div>
            </div>
            <center>
              <button className='btn btn-primary w-100' type="submit">Register</button>
            </center>
          </form>
        </div>
      </div>
    </div>
  );
};

export default RegistrationForm;

-----------------------------------------------------------------------------------------------
serevr.js

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const leaveRoutes = require('./routes/leave');
const Registers = require('./models/registrations'); // Ensure you're using the correct model
const LeaveRequest = require('./models/LeaveRequest');
const  remainderRoutes= require('./models/remainderModel')
require('dotenv').config();

const app = express();
const PORT = 5000;

mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('Connected to MongoDB'))
  .catch((err) => console.log('Failed to connect to MongoDB', err));

app.use(cors());
app.use(bodyParser.json());

app.use('/api/leave', leaveRoutes);
app.use('/api/remainder', remainderRoutes); 

// API endpoint to fetch details by email  
app.get('/api/registers/:email', async (req, res) => {
  try {
    const email = req.params.email;  // Fetch the email from the request parameters
    // console.log(`Fetching details for email: ${email}`);  // Log to check if email is being passed correctly

    const userDetails = await Registers.findOne({ email }, 'name subj year sem');  // Use the correct model (Registers)

    if (userDetails) {
      res.json(userDetails);  // Send back the user details if found
    } else {
      res.status(404).json({ message: 'User not found' });  // Return 404 if no user found
    }
  } catch (err) {
    res.status(500).json({ message: err.message });  // Handle any other errors
  }
});

// Registration route
app.post("/registers", async (req, res) => {
  const { year, sem, subj, email, name,section,branch } = req.body;
  const newRegistration = new Registers({ year, sem, email, name, subj,section,branch });
  await newRegistration.save()
    .then(() => {
      console.log("Data saved to the database");
      res.status(200).send("Data saved successfully");
    })
    .catch(err => {
      console.error("Error saving data:", err);
      res.status(500).send("Failed to save data");
    });
});


// API to fetch faculty names based on email
// app.post('/api/getFacultyNames', async (req, res) => {
//   try {
//     const { email } = req.body;
//     const facultyMembers = await Registers.find({ email });

//     if (facultyMembers.length > 0) {
//       const facultyNames = facultyMembers.map(faculty => faculty.name);
//       res.status(200).json({ facultyNames });
//     } else {
//       res.status(404).json({ message: 'No faculty members found for the given email' });
//     }
//   } catch (error) {
//     console.error('Error fetching faculty names:', error);
//     res.status(500).json({ message: 'Internal server error' });
//   }
// });
app.post('/api/getFacultyData', async (req, res) => {
  const { email, branch, sem, year } = req.body;

  try {
    // Query your database to get all matching faculty data based on the criteria
    const facultyData = await Registers.find({ email, branch, sem, year });

    if (facultyData.length > 0) {
      // Map the facultyData to get unique subjects and sections
      const subjects = new Set();  // Using Set to avoid duplicates
      const sections = new Set();  // Using Set to avoid duplicates

      facultyData.forEach(faculty => {
        if (Array.isArray(faculty.subj)) {
          faculty.subj.forEach(subject => subjects.add(subject));
        } else {
          subjects.add(faculty.subj);
        }

        if (Array.isArray(faculty.section)) {
          faculty.section.forEach(section => sections.add(section));
        } else {
          sections.add(faculty.section);
        }
      });

      // Return unique subjects and sections
      res.json({
        name: facultyData[0].name, // You can return the name of the first matching faculty
        subjects: Array.from(subjects), // Convert Set back to array
        sections: Array.from(sections),   // Convert Set back to array
      });
    } else {
      res.status(404).json({ message: 'No data found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Internal Server Error', error: error.message });
  }
});



app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

------------------------------------------------------------------------------------------------------------------
leaveResponse.js

import React from 'react';
import { Link } from 'react-router-dom';
import Home from './details';

  // const divStyle = { 
  //   Image: "url('https://uploads.sarvgyan.com/2014/05/GMRIT-Rajam.jpg')",  
  //   height: '40px', // Set your desired height  
  //   backgroundSize: 'cover', // Cover the entire div  
  //   backgroundPosition: 'center' ,// Center the image  
  //   filter:' blur(1px)'
  // }

function HomePage() {
  const back={ 
    opecity:'150px', 
    boxShadow: "0 4px 8px #fff, 0 8px 10px #f999" 
  }  
  return (
    <div className="container-fluid  bg-secondary  " > 
     <div className='p-5' > 
     
       {/* <nav className="navbar navbar-expand-lg navbar-light p-3 bg-warning rounded d-flex justifyContent-center alignItems-center ">
        <div className="container-fluid">
          <a className="navbar-brand" href="/home">Class_Adjustment_System</a>
          <div className="collapse navbar-collapse " id="navbarNav">
            <ul className="navbar-nav ml-auto">
              <li className="nav-item ">
                <Link to="/leaveform" className="nav-link btn btn-primary mx-2">
                  Apply_CAR
                </Link>
              </li>
              <li className="nav-item">
                <Link to="/registration" className="nav-link btn btn-success mx-2">
                  Register
                </Link>
              </li>
            </ul>
          </div>
        </div>
      </nav> */}
     
      <div className=" text-center text-dark p-5 rounded  bg-white " style={back} >
      <p style={{ float: 'left' }} >  
          <img src='https://uploads.sarvgyan.com/2014/05/GMRIT-Rajam.jpg' height={80}  className='rounded ' style={back} />  
     </p>
        <h1>Welcome to the Class Adjustment System....ðŸ‘‹</h1>
        <p className="mt-3 " >
          Use this platform to manage class adjustments efficiently.
        </p>
        <div className="mt-5 ">
          <Link to="/leaveform" className="btn btn-primary mx-5 p-3" style={back}>
            Apply for Class Adjustment
          </Link>
          <Link to="/registration" className="btn btn-success mx-2 p-3" style={back}>
            Register Now
          </Link>
        </div>
      </div>
      </div>
    
  <div className='d-flex justifyContent-center  alignItems-center   '>
   <div className='m-2 p-3 container'>
     <Home  />
   </div>
  </div>


  </div>
    
  );
}

export default HomePage;
------------------------------------------------------------------------------------------------------------------------
deatails.js

import React, { useEffect, useState } from 'react';
import axios from 'axios';

function Home() {
  const [acceptedRequests, setAcceptedRequests] = useState([]);
  const [loading, setLoading] = useState(false);
  const [timers, setTimers] = useState({});

  const fetchUserDetails = async (acceptedBy) => {
    try {
      const response = await axios.get(`http://localhost:5000/api/registers/${acceptedBy}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching user details:', error);
      return null;
    }
  };

  const fetchAcceptedRequests = async () => {
    setLoading(true);
    try {
      const response = await axios.get('http://localhost:5000/api/leave');
      const requests = response.data;

      const filteredRequests = requests.filter((request) => {
        const leaveDate = new Date(request.leaveDate);
        const currentDate = new Date();
        const differenceInDays = (currentDate - leaveDate) / (1000 * 3600 * 24);
        return differenceInDays <= 2;
      });

      const updatedRequests = await Promise.all(
        filteredRequests.map(async (request) => {
          if (request.acceptedBy) {
            const userDetails = await fetchUserDetails(request.acceptedBy);
            return { ...request, acceptedUserDetails: userDetails };
          }
          return request;
        })
      );

      updatedRequests.sort((a, b) => new Date(b.leaveDate) - new Date(a.leaveDate));
      setAcceptedRequests(updatedRequests);

      updatedRequests.forEach(request => {
        const savedTimer = localStorage.getItem(`timer_${request._id}`);
        if (savedTimer && parseInt(savedTimer, 10) <= 0) {
          setTimers(prevTimers => ({
            ...prevTimers,
            [request._id]: 0,
          }));
        } else if (savedTimer) {
          setTimers(prevTimers => ({
            ...prevTimers,
            [request._id]: parseInt(savedTimer, 10),
          }));
        } else {
          setTimers(prevTimers => ({
            ...prevTimers,
            [request._id]: 4 * 60,
          }));
        }
      });

    } catch (error) {
      console.error('Error fetching accepted requests:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const interval = setInterval(() => {
      setTimers(prevTimers => {
        const newTimers = {};
        Object.keys(prevTimers).forEach((requestId) => {
          const request = acceptedRequests.find(req => req._id === requestId);
          if (request && request.status === 'Accepted') {
            newTimers[requestId] = 0;
          } else if (prevTimers[requestId] > 0) {
            newTimers[requestId] = prevTimers[requestId] - 1;
            localStorage.setItem(`timer_${requestId}`, newTimers[requestId]);
          } else {
            newTimers[requestId] = 0;
            localStorage.setItem(`timer_${requestId}`, 0);
          }
        });
        return newTimers;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [acceptedRequests]);

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
  };

  useEffect(() => {
    fetchAcceptedRequests();
  }, []);

  function formatDate(date) {
    const d = new Date(date);
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const year = String(d.getFullYear()).slice(-2);
    return `${day}/${month}/${year}`;
  }
//  const row = {  
//       width: "300px" /* Wider for the second column (Name) */  
//   } 

  return (
    <div className='container p-3'>
    <div>
      <div className="d-flex justify-content-between mb-2">
        <h4><u><b className='text-white'>Accepted Faculty Details :</b></u></h4>
        <button
          className="btn btn-dark mx-2 fs-5"
          onClick={fetchAcceptedRequests} >
          &#x1F504; Refresh
        </button>
      </div>
      <div>
        {loading ? (
          <div>Loading...</div>
        ) : (
          <div style={{ position: 'relative', height: '400px', overflowY: acceptedRequests.length > 5 ? 'scroll' : 'unset' }}>
            <table className="table table-bordered table-lg" style={{ tableLayout: 'fixed', width: '100%' }}>
              <thead className='bg-warning text-center border-dark' style={{ position: 'sticky', top: 0, zIndex: 1 }}>
                <tr>
                  {/* Smaller columns */}
                  <th style={{ width: '5%' }}>Serial No.</th>
                  <th style={{ width: '15%' }}>Your Name</th>
                  <th style={{ width: '10%' }}>Leave Date</th>
                  <th style={{ width: '7%' }}>Branch</th>
                  <th style={{ width: '5%' }}>Year</th>
                  <th style={{ width: '8%' }}>Semester</th>
  
                  {/* Larger columns */}
                  <th style={{ width: '15%' }}>Faculty Name</th>
                  <th style={{ width: '18%' }}>Faculty Subject</th>
  
                  {/* Status and Timer */}
                  <th className='bg-success text-white' style={{ width: '8%' }}>Status</th>
                  <th className='bg-danger text-white' style={{ width: '8%' }}>Timer</th>
                </tr>
              </thead>
              <tbody className='bg-info text-center border-dark'>
                {acceptedRequests.length > 0 ? (
                  acceptedRequests.map((request, index) => (
                    <tr
                      key={index}
                      style={{
                        backgroundColor: request.status === 'Pending' ? 'white' : 'cyan',
                        textAlign: 'center',
                        verticalAlign: 'middle',
                      }}
                    >
                      {/* Smaller cells */}
                      <td>{index + 1}</td>
                      <td>{request.name}</td>
                      <td>{formatDate(request.leaveDate) ? new Date(formatDate(request.leaveDate)).toLocaleDateString() : 'No Date Available'}</td> 
                      <td>{request.branch}</td>
                      <td>{request.acceptedUserDetails ? request.acceptedUserDetails.year : 'N/A'}</td>
                      <td>{request.acceptedUserDetails ? request.acceptedUserDetails.sem : 'N/A'}</td>
  
                      {/* Larger cells */}
                      <td>{request.acceptedUserDetails ? request.acceptedUserDetails.name : 'N/A'}</td>
                      <td>{request.acceptedUserDetails ? request.acceptedUserDetails.subj : 'N/A'}</td>
  
                      {/* Status and Timer */}
                      <td className='bg-white fw-bold text-success'>{request.status}</td>
                      <td>{timers[request._id] > 0 ? formatTime(timers[request._id]) : <span>Timeup</span>}</td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="10" className="text-center">No accepted requests yet</td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  </div>
  
  );
}

export default Home;

----------------------------------------------------------------------------------------------------------------------
leave.js 

const express = require('express');
const router = express.Router();
const LeaveRequest = require('../models/LeaveRequest');
const nodemailer = require('nodemailer');
const Register = require('../models/registrations');
const Remainder = require('../models/remainderModel'); // Remainder database model
const auth = require('../env.js');

// Configure Nodemailer transporter
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: auth.EMAIL_USER,
    pass: auth.EMAIL_PASS,
  },
});

// Helper function to send an email
const sendEmail = async (to, subject, html) => {
  return transporter.sendMail({
    from: auth.EMAIL_USER,
    to,
    subject,
    html,
  });
};

// Function to display a countdown timer in an email
const generateTimerHtml = (minutes) => {
  return `
    <div>
      <h2>Time Remaining: ${minutes} minutes</h2>
      <p>Please act before the time expires!</p>
    </div>
  `;
};

// Format date utility
function formatDate(date) {
  const d = new Date(date);
  const day = String(d.getDate()).padStart(2, '0');
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const year = String(d.getFullYear()).slice(-2);
  return `${day}/${month}/${year}`;
}

// Function to handle email expiration and resending
  // const handleEmailTimeout = async (leaveRequest, priority, nextPriorityHandler) => {
  //   setTimeout(async () => {
  //     const acceptedLeave = await LeaveRequest.findById(leaveRequest._id);
  //     if (!acceptedLeave || acceptedLeave.status !== 'Accepted') {
  //       await nextPriorityHandler(leaveRequest);
  //     }
  //   }, 1 * 60 * 1000); // 1-minute delay for each priority stage
  // };

// Function to handle each priority case
// Function to handle each priority case
const handleEmailTimeout = async (leaveRequest, priority, nextPriorityHandler) => {
  setTimeout(async () => {
    const acceptedLeave = await LeaveRequest.findById(leaveRequest._id);
    if (!acceptedLeave || acceptedLeave.status !== 'Accepted') {
      await nextPriorityHandler(leaveRequest);
    }
  }, 1 * 60 * 1000); // 1-minute delay for each priority stage
};

const handleLeaveRequest = async (leaveRequest, priority, previousEmails = []) => {
  let users = [];
  let condition = { sem: leaveRequest.sem, year: leaveRequest.year, branch: leaveRequest.branch, acceptedUserEmail: leaveRequest.email, status:leaveRequest.status};
  let condition1 = { sem: leaveRequest.sem, year: leaveRequest.year, branch: leaveRequest.branch, email: { $ne: leaveRequest.email }, section: leaveRequest.section };
  let condition2 = { sem: leaveRequest.sem, year: leaveRequest.year, branch: leaveRequest.branch, subj: leaveRequest.subj, email: { $ne: leaveRequest.email } };
  let condition3 = { sem: leaveRequest.sem, year: leaveRequest.year, branch: leaveRequest.branch, email: { $ne: leaveRequest.email } };

  if (priority === 1) {
    const remainderUsers = await Remainder.find(condition);
    users = remainderUsers.map(user => ({ email: user.requesterEmail }));
    console.log(users, 'priority-1');
  } else if (priority === 2) {
    condition1.email = { $nin: [leaveRequest.email, ...previousEmails] };
    users = await Register.find(condition1);
    console.log(users, 'priority-2');
  } else if (priority === 3) {
    condition2.email = { $nin: [leaveRequest.email, ...previousEmails] };
    users = await Register.find(condition2);
    console.log(users, 'priority-3');
  } else if (priority === 4) {
    condition3.email = { $nin: [leaveRequest.email, ...previousEmails] };
    users = await Register.find(condition3);
    console.log(users, 'priority-4');
  }
  
  // Skip current priority if no users are found and continue to the next priority without applying the time limit
  if (users.length === 0) {
    console.log(`No users found for priority ${priority}, skipping to the next priority.`);
    return previousEmails;
  }

  // Get valid email addresses and ensure there are no undefined/invalid email addresses
  const emailAddresses = users.map(user => user.email).filter(email => email);

  if (emailAddresses.length === 0) {
    console.log('No valid email addresses found for priority:', priority);
    return previousEmails; // No valid emails, return previous list
  }

  // Add to previously notified users
  const allNotifiedEmails = [...previousEmails, ...emailAddresses];

  const emailMessage = `
    <div style=" display:flex;align-items:center;justify-content:center; color:white; background-color:grey; border:2px solid yellow;  border-radius:3rem;">
     <div style="padding:20px;margin:15px;">
      <h2>Class Adjustment Request from <b style="color:yellow; font-size:25px; padding:3px;">${leaveRequest.name}..ðŸ‘‹<b></h2>
      <p>${generateTimerHtml(1)}</p>
    <table style="font-size:18px; color:white; width:100%;">
           <tr>
            <td>Branch</td>
            <td><b>: ${leaveRequest.branch} year</b></td>
          </tr>
          <tr>
          <tr>
            <td>Year</td>
            <td><b>: ${leaveRequest.year} year</b></td>
          </tr>
          <tr>
            <td>Semester</td>
            <td><b>: ${leaveRequest.sem} sem</b></td>
          </tr>
          <tr>
           <tr>
            <td>Section</td>
            <td><b>: ${leaveRequest.section} </b></td>
          </tr>
          <tr>
            <td>Subject Name</td>
            <td><b>: ${leaveRequest.subj}</b></td>
          </tr>
          <tr>
            <td>Which Period</td>
            <td><b>: ${leaveRequest.period}</b></td>
          </tr>
          <tr>
            <td>Period Timings</td>
            <td><b>: ${leaveRequest.startTime}</b> To <b>${leaveRequest.endTime}</b></td>
          </tr>
          <tr>
            <td>Leave Date </td>
            <td><b>: ${formatDate(leaveRequest.leaveDate)}</b> on <b>${leaveRequest.dayName}<b></td>
          </tr>
        </table>
        <p>
         <a href="http://localhost:5000/api/leave/accept/${leaveRequest._id}?acceptingEmail={{userEmail}}&priority=${priority}" style="padding: 14px; background-color: green; color: white;font-size:18px;">Accept</a>
      <a href="http://localhost:5000/api/leave/reject/${leaveRequest._id}?rejectingEmail={{userEmail}}" style="padding: 14px; background-color: red; color: white;font-size:18px;">Reject</a>
      </p>
     </div>
    </div>
  `;

  // Send email to all valid recipients
  await Promise.all(emailAddresses.map(userEmail =>
    sendEmail(userEmail, 'Class Adjustment Request', emailMessage.replace('{{userEmail}}', userEmail))
  ));

  return allNotifiedEmails; // Return the updated list of notified users
};

router.post('/', async (req, res) => {
  const { year, sem, name, email, subj, leaveDate, period, branch, section, startTime, endTime,dayName } = req.body;

  try {
    const leaveRequest = new LeaveRequest({
      name, email, sem, year, leaveDate, period, subj, branch, section, startTime, endTime,dayName
    });
    await leaveRequest.save();

    let notifiedUsers = [];

    // Priority-1
    notifiedUsers = await handleLeaveRequest(leaveRequest, 1, notifiedUsers);
    handleEmailTimeout(leaveRequest, 1, async () => {
      const requestStatus = await LeaveRequest.findById(leaveRequest._id);
      if (requestStatus.status === 'Accepted') {
        console.log('Request already accepted, stopping further phases.');
        return; // Stop further phases if the request is already accepted
      }

      // Priority-2
      notifiedUsers = await handleLeaveRequest(leaveRequest, 2, notifiedUsers);
      handleEmailTimeout(leaveRequest, 2, async () => {
        const requestStatus = await LeaveRequest.findById(leaveRequest._id);
        if (requestStatus.status === 'Accepted') {
          console.log('Request already accepted, stopping further phases.');
          return; // Stop further phases if the request is already accepted
        }

        // Priority-3
        notifiedUsers = await handleLeaveRequest(leaveRequest, 3, notifiedUsers);
        handleEmailTimeout(leaveRequest, 3, async () => {
          const requestStatus = await LeaveRequest.findById(leaveRequest._id);
          if (requestStatus.status === 'Accepted') {
            console.log('Request already accepted, stopping further phases.');
            return; // Stop further phases if the request is already accepted
          }

          // Priority-4 (final)
          notifiedUsers = await handleLeaveRequest(leaveRequest, 4, notifiedUsers);
          handleEmailTimeout(leaveRequest, 4, async () => {
            const leaveStatus = await LeaveRequest.findById(leaveRequest._id);
            if (leaveStatus && leaveStatus.status === 'Pending') {
              await sendEmail(leaveRequest.email, 'No Response to Leave Request', `
                <div style="align-items:center; color:bleck; background-color:yellow; padding:10px; ">
                  <h1>No one accepted your leave request....</h1>
                </div>
              `);
            }
          });
          console.log('Time up ..No one accepted your request...try another day..')
        });
      });
    });
   
    res.status(201).json({ message: 'Request submitted successfully.' });
  } catch (error) {
    console.error('Error submitting leave request:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

router.get('/accept/:id', async (req, res) => {
  // Route to accept a leave request
  const { acceptingEmail, priority } = req.query; // Email of the accepting user and priority

  try {
    const leaveRequest = await LeaveRequest.findById(req.params.id);
    if (!leaveRequest) return res.status(404).send('Request not found.');

    // Check if the request has already been accepted
    if (leaveRequest.status === 'Accepted') {
      return res.send('<h1>This request has already been accepted.</h1>');
    }

    // Mark the request as accepted by the current user
    leaveRequest.status = 'Accepted';
    leaveRequest.acceptedBy = acceptingEmail;
    await leaveRequest.save();

    // Check if the accepting user is from the first priority (Remainder users)
    if (parseInt(priority) === 1) {
      // Update the status in the remainder database to 'claimed'
      await Remainder.updateOne(
        { acceptedUserEmail: leaveRequest.email,requesterEmail:leaveRequest.acceptedBy },
        { $set: { status: 'claimed' } }
      );
    } else {
      // If other priorities accept the request, save the accepted user in the Remainder database
      const remainder = new Remainder({
        branch: leaveRequest.branch,
        year: leaveRequest.year,
        sem: leaveRequest.sem,
        requesterEmail: leaveRequest.email,
        acceptedUserEmail: leaveRequest.acceptedBy
      });
      await remainder.save();
    }

    // Fetch details of the accepting user from the Register database
    const acceptingUser = await Register.findOne(
      { email: leaveRequest.acceptedBy },
      'name year sem subj branch section'
    );

    // Send an email to the requester with details of the accepting user
    await sendEmail(
      leaveRequest.email,
      'GMRit-CA-Accepted message ðŸ‘‹',
      `
      <div style="background-color:grey; border:2px solid yellow; display:flex;align-items:center;justify-content:center; color:white; border-radius:3rem;">
        <div style="margin:10px; padding:20px;">
        <h1>Your request has been accepted by <b style="color:yellow; font-size:25px;">${acceptingUser.name}..<b>ðŸ‘‹</h1>
        <h3 style="color:yellow; font-size:18px;">Faculty details:</h3>
        <ul style="font-size:18px; color:white;">
          <li>Branch: ${acceptingUser.branch}</li>
          <li>Year: ${acceptingUser.year}</li>
          <li>Semester: ${acceptingUser.sem}</li>
          <li>Section: ${acceptingUser.section}</li>
          <li>Subject: ${acceptingUser.subj}</li>
          <li>Leave Date: <b> ${formatDate(leaveRequest.leaveDate)} <b> on <b>${leaveRequest.dayName}<b></li>
        </ul>
        </div>
      </div>
      `
    );

    res.send('<h1 style="align-items:center;display:flex; justify-content:center; color:white; background-color:green; padding:10px;  border-radius:3rem;">Your accepted the CA-request successfully...</h1>');
  } catch (error) {
    console.error('Error accepting request:', error);
    res.status(500).send('Error accepting request');
  }
});
// Route to reject a leave request
router.get('/reject/:id', async (req, res) => {
  try {
    const leaveRequest = await LeaveRequest.findById(req.params.id);
    if (!leaveRequest) return res.status(404).send('Leave Request not found.');

    leaveRequest.status = 'Rejected';
    // await leaveRequest.save();

    // Notify requester about rejection
    // await sendEmail(leaveRequest.email, 'Class Adjustment Request Rejected', `
    //   <div>
    //     <h1>Your request has been rejected.</h1>
    //   </div>
    // `);

    res.send('<h1 style="align-items:center; color:white; background-color:red;display:flex; justify-content:center; padding:10px; ">You rejected the request successfully.</h1>');
  } catch (error) {
    console.error('Error rejecting request:', error);
    res.status(500).send('Error rejecting request');
  }
});

// Route to reject a leave request
// router.get('/reject/:id', async (req, res) => {
//   try {
//     const leaveRequest = await LeaveRequest.findById(req.params.id);
//     if (!leaveRequest) return res.status(404).send('Leave Request not found.');

//     leaveRequest.status = 'Rejected';
//     // await leaveRequest.save();

//     // Notify requester about rejection
//     // await sendEmail(leaveRequest.email, 'Class Adjustment Request Rejected', `
//     //   <div>
//     //     <h1>Your request has been rejected.</h1>
//     //     <p>Thank you for your response!</p>
//     //   </div>
//     // `);
//     res.send('<h1>You rejected the request successfully.</h1>');
//   } catch (error) {
//     console.error('Error rejecting request:', error);
//     res.status(500).send('Error rejecting request');
//   }
// });
// Fetch all leave requests (with accepted details)
 router.get('/', async (req, res) => {
  try {
    // Fetch all leave requests and populate the 'acceptedBy' field with user details from the 'registers' collection
    const leaveRequests = await LeaveRequest.find()
      .populate('acceptedBy')  // Populate the 'acceptedBy' field with full user details
      .exec();

    res.json(leaveRequests);
  } catch (error) {
    console.error('Error fetching leave requests:', error);
    res.status(500).send('Server error');
  }
});

router.post('/accept', async (req, res) => {
  try {
    const { leaveRequestId, acceptedByEmail } = req.body;

    // Find the user in the 'registers' collection by email
    const acceptedUser = await Register.findOne({ email: acceptedByEmail });

    if (!acceptedUser) {
      return res.status(404).json({ message: 'User not found in registers collection' });
    }

    // Find the leave request and update it with the ObjectId of the accepted user
    const updatedLeaveRequest = await LeaveRequest.findByIdAndUpdate(
      leaveRequestId,
      { 
        status: 'Accepted',
        acceptedBy: acceptedUser._id // Store ObjectId from 'registers'
      },
      { new: true }
    );

    if (!updatedLeaveRequest) {
      return res.status(404).json({ message: 'Leave request not found' });
    }

    res.json({ message: 'Leave request accepted', leaveRequest: updatedLeaveRequest });
  } catch (error) {
    console.error('Error accepting leave request:', error);
    res.status(500).json({ message: 'Server error' });
  }
});
// Fetch leave requests along with accepted user details
router.get('/api/leave', async (req, res) => {
  try {
    const leaveRequests = await LeaveRequest.find();

    // Fetch accepted user details for each leave request
    const leaveRequestsWithUserDetails = await Promise.all(leaveRequests.map(async (request) => {
      if (request.acceptedBy) {
        // Fetch the user details from the registers database using acceptedBy email
        const user = await Register.findOne({ email: request.acceptedBy });
        return {
          ...request.toObject(),
          acceptedUserDetails: user ? {
            name: user.name,
           
          } : null
        };
      }
      console.log(name)
      return {
        
        ...request.toObject(),
        acceptedUserDetails: null
      };
    }));

    res.json(leaveRequestsWithUserDetails);
  } catch (error) {
    res.status(500).json({ error: 'Error fetching leave requests with user details' });
  }
});


module.exports = router;

------------------------------------------------------------------------------------------------------------------------
app.js

import React from 'react';
import LeaveForm from './components/LeaveForm';
import{BrowserRouter,Routes,Route} from "react-router-dom"
import RegistrationFrom from './components/registrationForm'
import LeaveResponse from './components/LeaveResponse';


function App() {
  return (
    <div  className="App">
    <BrowserRouter>
      <Routes>
        <Route path='/' element={<LeaveResponse />}></Route>
        <Route path='/registration' element={<RegistrationFrom />}></Route>
        <Route path='/leaveform' element={<LeaveForm/>}></Route>
        <Route path='*' element={"page not found 404 ERROR"}></Route>
      </Routes>
    </BrowserRouter>
     
    </div>
  );
}

export default App;

-----------------------------------------------------------------------------------------------------------------------------
schema-leaveRequest.js

const mongoose = require('mongoose');

const LeaveRequestSchema = new mongoose.Schema({
  branch:String,
  year:String,
  sem:String,
  subj: String,
  section:String,
  name: String,
  email:String,
  leaveDate: Date,
  period:String,
  dayName:String,
  startTime:String,
  endTime:String,
  status: { type: String, default: 'Pending' },
  acceptedBy: String  

});
const LeaveRequest= mongoose.model('LeaveRequest', LeaveRequestSchema);
module.exports = LeaveRequest

-----------------------------------------------------------------------------------------------------------------------------
schema-registration.js

const mongoose = require('mongoose');

const RegistrationSchema = new mongoose.Schema({
  branch:String,
  year:String,
  sem:String, 
  section:String,
  email: String,
  name:String,
  subj: String

  
});
const Registers = mongoose.model('Registers', RegistrationSchema);
module.exports = Registers 
---------------------------------------------------------------------------------------------------------------------------------


