MONGO_URI="mongodb+srv://schinni9999:chinni9999@cluster2.rffpqrc.mongodb.net/Project-1?retryWrites=true&w=majority&appName=Cluster2"
PORT = 5000

# mongodb://127.0.0.1:27017/Car_Db
# mongodb+srv://vangurupradeep123:vangurupradeep123@registers.ebapf.mongodb.net/Car_Db?retryWrites=true&w=majority&appName=registers
# mongodb+srv://vangurupradeep123:LeaveManagement@registers.ebapf.mongodb.net/



# const express = require('express');
# const router = express.Router();
# const LeaveRequest = require('../models/LeaveRequest');
# const nodemailer = require('nodemailer');
# const Register = require('../models/registrations');
# const auth = require('../env.js');

# const transporter = nodemailer.createTransport({
#   service: 'gmail',
#   auth: {
#     user: auth.EMAIL_USER,
#     pass: auth.EMAIL_PASS,
#   },
# });

# router.post('/', async (req, res) => {
#   const { name, branch, facultyId, startDate, endDate, reason } = req.body;

#   try {
#     // Save the leave request to the database
#     const leaveRequest = new LeaveRequest({ name, branch, facultyId, startDate, endDate, reason });
#     await leaveRequest.save();

#     // Fetch all users' emails to whom the leave request should be sent
#     const users = await Register.find({}, 'email'); // Adjust as needed
#     const emailAddresses = users.map(user => user.email);

#     const emailMessage = `
#       <h3>Leave Request from ${name}</h3>
#       <p>Reason: ${reason}</p>
#       <p>Start Date: ${startDate}</p>
#       <p>End Date: ${endDate}</p>
#       <p>
#         <a href="http://localhost:5000/api/leave/accept/${leaveRequest._id}">Accept</a> | 
#         <a href="http://localhost:5000/api/leave/decline/${leaveRequest._id}">Decline</a>
#       </p>
#     `;

#     // Send the leave request email to all users
#     const emailPromises = emailAddresses.map(email => {
#       return transporter.sendMail({
#         from: auth.EMAIL_USER,
#         to: email,
#         subject: 'New Leave Request',
#         html: emailMessage,
#       });
#     });

#     await Promise.all(emailPromises);

#     // Respond with a message indicating success
#     res.status(201).json({ message: `Leave request submitted and emails sent to ${emailAddresses.length} users.` });
#   } catch (error) {
#     console.error('Error submitting leave request:', error);
#     res.status(500).json({ error: 'Internal Server Error' });
#   }
# });

# router.get('/accept/:id', async (req, res) => {
#   try {
#     const leaveRequest = await LeaveRequest.findById(req.params.id);
#     if (!leaveRequest) return res.status(404).send('Leave request not found.');

#     leaveRequest.status = 'Accepted';
#     await leaveRequest.save();

#     // Send email to the requester
#     await transporter.sendMail({
#       from: auth.EMAIL_USER,
#       to: leaveRequest.email, // Assuming leaveRequest contains email field
#       subject: 'Leave Request Accepted',
#       html: `<p>Your leave request has been accepted by ${req.query.name}.</p>`,
#     });

#     res.send(`Accepted by ${req.query.name}`);
#   } catch (error) {
#     console.error('Error updating leave request:', error);
#     res.status(500).send('Error updating leave request');
#   }
# });

# router.get('/decline/:id', async (req, res) => {
#   try {
#     const leaveRequest = await LeaveRequest.findById(req.params.id);
#     if (!leaveRequest) return res.status(404).send('Leave request not found.');

#     leaveRequest.status = 'Declined';
#     await leaveRequest.save();

#     // Send email to the requester
#     await transporter.sendMail({
#       from: auth.EMAIL_USER,
#       to: leaveRequest.email, // Assuming leaveRequest contains email field
#       subject: 'Leave Request Declined',
#       html: `<p>Your leave request has been declined by ${req.query.name}.</p>`,
#     });

#     res.send(`Declined by ${req.query.name}`);
#   } catch (error) {
#     console.error('Error updating leave request:', error);
#     res.status(500).send('Error updating leave request');
#   }
# });

# module.exports = router;


-------------------------------------------------------------------------------------------------------------------------------
# leaveForm.js

# import React from 'react';  
# import { useForm } from 'react-hook-form';  
# import axios from 'axios';  

# function LeaveForm() {  
#   const { register, handleSubmit } = useForm();  

#   const onSubmit = (data) => {  
#     axios.post('http://localhost:5000/api/leave', data)  
#       .then((response) => {  
#         alert('Class Adjustment Form submitted successfully');  
#       })  
#       .catch((error) => {  
#         console.error('There was an error submitting the form!', error);  
#       });  
#   };  

#   const formStyle = {  
#     float: "left",  
#     color: "white",  
#     fontSize: "15px"  
#   };  

#   return (  
#     <div className='col-lg-6 container rounded p-5'>  
#       <center className='m-2 p-5 bg-primary rounded'>  
#         <form onSubmit={handleSubmit(onSubmit)} className='form-group'>  
#           <h3>Class Adjustment Form</h3><br />  
          
#           <select {...register('year')} className='form-control mb-3' required>  
#             <option value="">Select Year</option>  
#             <option value="1">1st Year</option>  
#             <option value="2">2nd Year</option>  
#             <option value="3">3rd Year</option>  
#             <option value="4">4th Year</option>  
#           </select>  

           
#           <select {...register('sem')} className='form-control mb-3' required>  
#             <option value="">Select Semester</option>  
#             <option value="1">1st Semester</option>  
#             <option value="2">2nd Semester</option>  
#             <option value="3">3rd Semester</option>  
#             <option value="4">4th Semester</option>  
#           </select>  

          
#           <input {...register('name')} className='form-control mb-3' placeholder="Name" required />  
#           <input {...register('email')} className='form-control mb-3' placeholder="Email" required />  
#           {/* <input {...register('branch')} className='form-control mb-3' placeholder="Branch" required />   */}
#           <select {...register('subj')} className='form-control mb-3' required>  
#             <option value="">Select Subject</option>  
#             <option value="web">WEB</option>  
#             <option value="dbms">DBMS</option>  
#             <option value="ds">DS</option>  
#             <option value="dcs">DCS</option>  
#           </select>  
#           <label style={formStyle}>Start Date:</label>  
#           <input {...register('startDate')} className='form-control mb-3' type="date" required />  
#           <label style={formStyle}>End Date:</label>  
#           <input {...register('endDate')} className='form-control mb-3' type="date" required />  
#           <button className='btn btn-warning rounded w-100' type="submit">Submit</button>  
#         </form>  
#       </center>  
#     </div>  
#   );  
# }  

# export default LeaveForm;
-----------------------------------------------------------------------------------------------------------------------------
# leave.js

# const express = require('express');  
# const router = express.Router();  
# const LeaveRequest = require('../models/LeaveRequest');  
# const nodemailer = require('nodemailer');  
# const Register = require('../models/registrations');  
# const auth = require('../env.js');  

# // Nodemailer transporter setup  
# const transporter = nodemailer.createTransport({  
#   service: 'gmail',  
#   auth: {  
#     user: auth.EMAIL_USER,  
#     pass: auth.EMAIL_PASS,  
#   },  
# });  

# // Route to submit leave requests  
# router.post('/', async (req, res) => {  
#   const { year, sem, name, email, startDate, endDate, subj } = req.body;  

#   try {  
#     // Save the leave request to the database  
#     const leaveRequest = new LeaveRequest({ name, email, sem, year, startDate, endDate, subj });  
#     await leaveRequest.save();  

#     // Fetch all faculty members' emails with matching subject, semester, and year, excluding the requester  
#     const users = await Register.find(  
#       { email: { $ne: email }, subj: subj, sem: sem, year: year },  
#       'email'  
#     );  
    
#     const emailAddresses = users.map(user => user.email);  

#     // Email format  
#     const emailMessage = `  
#       <h3>Requested from ${name}</h3>  
#       <p>Subject: ${subj}</p>  
#       <p>From Start Date: ${startDate} TO End Date: ${endDate}</p>  
#       <p>  
#         <label><a href="http://localhost:5000/api/leave/accept/${leaveRequest._id}?acceptingEmail={{userEmail}}">Accept</a></label>  
#         <label><a href="http://localhost:5000/api/leave/reject/${leaveRequest._id}?rejectingEmail={{userEmail}}">Reject</a></label>  
#       </p>  
#     `;  

#     // Send leave request email to users  
#     const emailPromises = emailAddresses.map(userEmail => {  
#       return transporter.sendMail({  
#         from: auth.EMAIL_USER,  
#         to: userEmail,  
#         subject: 'New ClassAjustment-Request',  
#         html: emailMessage.replace('{{userEmail}}', userEmail),  
#       });  
#     });  

#     await Promise.all(emailPromises);  

#     res.status(201).json({ message: `request submitted and emails sent to ${emailAddresses.length} users.` });  
#   } catch (error) {  
#     console.error('Error submitting leave request:', error);  
#     res.status(500).json({ error: 'Internal Server Error' });  
#   }  
# });  

# // Accept  request  
# router.get('/accept/:id', async (req, res) => {  
#   try {  
#     const leaveRequest = await LeaveRequest.findById(req.params.id);  
#     if (!leaveRequest) return res.status(404).send('ClassAjustment-Request  request not found.');  

#     // Check if the request has already been accepted  
#     if (leaveRequest.status === 'Accepted') {  
#       return res.send(`Oops! Someone already accepted this request. 🤧`);  
#     }  

#     // Fetch the accepting user  
#     const acceptingUser = await Register.findOne({ email: req.query.acceptingEmail });  
#     leaveRequest.acceptedBy = acceptingUser ? acceptingUser.name : 'Unknown';  

#     // Set status to 'Accepted'  
#     leaveRequest.status = 'Accepted';  
#     await leaveRequest.save();  

#     // Send email to the requester  
#     await transporter.sendMail({  
#       from: auth.EMAIL_USER,  
#       to: leaveRequest.email,  
#       subject: 'ClassAjustment-Request  Request Accepted',  
#       html: `<h4>Your request has been accepted by ${leaveRequest.acceptedBy}.</h4>`,  
#     });  

#     res.send(`You accepted the ClassAjustment-Request  request. Thank you! 👍`);  
#   } catch (error) {  
#     console.error('Error accepting ClassAjustment-Request  request:', error);  
#     res.status(500).send('Error updating ClassAjustment-Request  request');  
#   }  
# });  

# // Reject leave request  
# router.get('/reject/:id', async (req, res) => {  
#   try {  
#     const leaveRequest = await LeaveRequest.findById(req.params.id);  
#     if (!leaveRequest) return res.status(404).send('ClassAjustment-Request  request not found.');  
    
#     // Check if the request has already been accepted  
#     if (leaveRequest.status === 'Accepted') {  
#       return res.send('Oops! Someone already accepted this request. 🤧');  
#     }  

#     leaveRequest.status = 'Declined';  
#     await leaveRequest.save();  

#     // Send email to the requester  
#     await transporter.sendMail({  
#       from: auth.EMAIL_USER,  
#       to: leaveRequest.email,  
#       subject: 'ClassAjustment-Request Declined',  
#       html: `<p>Your ClassAjustment-Request  has been declined.</p>`,  
#     });  

#     // Notify all users in the same semester  
#     const users = await Register.find(  
#       { email: { $ne: email },sem: leaveRequest.sem, year: leaveRequest.year },  
#       'email'  
#     );  

#     const emailAddresses = users.map(user => user.email);  
#     const emailMessage = `  
#       <h3>ClassAdjustment-Request: New Response<p>Requested from: ${leaveRequest.name}</p></h3>
#       <p>Subject: ${leaveRequest.subj}</p>  
#       <p>From Start Date: ${leaveRequest.startDate} TO End Date: ${leaveRequest.endDate}</p>  
#       <p>  
#         <label><a href="http://localhost:5000/api/leave/accept/${leaveRequest._id}?acceptingEmail={{userEmail}}">Accept</a></label>  
#       </p>  
#     `;  

#     const emailPromises = emailAddresses.map(userEmail => {  
#       return transporter.sendMail({  
#         from: auth.EMAIL_USER,  
#         to: userEmail,  
#         subject: ' ClassAdjustment-Request: New Response',  
#         html: emailMessage.replace('{{userEmail}}', userEmail),  
#       });  
#     });  

#     await Promise.all(emailPromises);  

#     res.send('Thank you for your response.');  
#   } catch (error) {  
#     console.error('Error rejecting leave request:', error);  
#     res.status(500).send('Error updating leave request');  
#   }  
# });  

# module.exports = router;